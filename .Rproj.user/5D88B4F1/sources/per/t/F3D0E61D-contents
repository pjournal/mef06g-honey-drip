library(shiny)
library(data.table)
library(shinyWidgets)
library(DT)
library(ggplot2)
library(dplyr)
library(tidyverse)
fs <- readRDS("fs.rds")
colnames(fs)[3] <- "il"
colnames(fs)[2] <- "UniTur"
results <- fs
fs1<-fs
fs1<- fs1 %>% mutate(`K` = as.numeric(`K`))
fs1<- fs1 %>% mutate(`E` = as.numeric(`E`))
fs1<- fs1 %>% mutate(`T` = as.numeric(`T`))
fs1<- fs1[duplicated(fs1$`Üniversite Adı`, fromLast = TRUE), ]

fs1_sum_E <- fs1 %>%group_by(`UniTur`)%>%
  summarize(sum =sum(`E`)) %>%
  arrange(desc(sum))
fs1_sum_K <- fs1 %>%group_by(`UniTur`)%>%
  summarize(sum =sum(`K`)) %>%
  arrange(desc(sum))

fs1_k_e <- fs1_sum_K %>% left_join(fs1_sum_E, by = "UniTur")
fs1_k_e <- pivot_longer(fs1_k_e,2:3,names_to = "GENDER",values_to ="SUM")
# UI
ui <- fluidPage(
  
  # Application title
  titlePanel(
    h1("Nationality Table", align="center")
  ),
  sidebarLayout(position = "right",
    
    sidebarPanel(h4("This is dashboard"),
    
    pickerInput("ilInput", "İl", choices=unique(results$il), selected=NULL, multiple=TRUE),
    pickerInput("UniTurInput", "Üniversite Türü", choices=unique(results$UniTur),selected=NULL, multiple=TRUE),
    pickerInput("UniTurInput", "Üniversite Türü", choices=unique(results$UniTur),selected=NULL, multiple=TRUE)
    ),
    mainPanel( tabsetPanel(type = "tabs",
                          tabPanel("Data Table", DT::dataTableOutput('table')),
                          tabPanel("Visual Statistics", plotOutput("plot")))
    
)
))


  


# Server
server <- function(input, output) {
  
  
  output$plot <- renderPlot({
      ggplot(fs1_k_e, aes(x = `UniTur`, y = `SUM`)) + 
      geom_bar(aes(fill = "GENDER"),stat = 'identity', position = "dodge2") +
      scale_color_manual(values = c("#0073C2FF", "#EFC000FF"))+
      scale_fill_manual(values = c("#0073C2FF", "#EFC000FF"))})
  
  mydata <- reactive({
    if (is.null(input$ilInput) & is.null(input$UniTurInput)) {df <- results} 
    else if (!is.null(input$ilInput) & is.null(input$UniTurInput)) {df <- results[results$il %in% input$ilInput,]
    df}
    else if (is.null(input$ilInput) &!is.null(input$UniTurInput)) {df <- results[results$UniTur %in% input$UniTurInput,]
    df}
    else if (!is.null(input$ilInput) & !is.null(input$UniTurInput)) { df <- results[(results$il %in% input$ilInput) & (results$UniTur %in% input$UniTurInput),]
    df
    }
    
  })

  output$table <- DT::renderDataTable(
    datatable(mydata())
    
  )
  
}

# Run the application 
shinyApp(ui = ui, server = server)
